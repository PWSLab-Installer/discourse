---

- hosts: localhost
  connection: local
  
  vars:
    pip_install_packages:
      - name: docker

  tasks:
      
    - name: Install Role PIP
      local_action: command ansible-galaxy install -f geerlingguy.pip 

    - name: Install Role Docker
      local_action: command ansible-galaxy install -f geerlingguy.docker

    - name: Check if PIP is already installed
      stat: path=/usr/bin/pip
      register: pip_exists

    - name: Check if Docker is already installed
      stat: path=/usr/bin/docker
      register: docker_exists

    - name: Applying role PIP
      command: mv ~/.ansible/roles/geerlingguy.pip ~/.ansible/roles/pwslab.pip
      when: not pip_exists.stat.exists
      ignore_errors: yes

    - name: Applying role Docker
      command: mv ~/.ansible/roles/geerlingguy.docker ~/.ansible/roles/pwslab.docker
      when: not docker_exists.stat.exists
      ignore_errors: yes

    - name: Check the version of CentOS
      command: cat /etc/centos-release
      register: cent_os
      ignore_errors: yes

    - name: Check if version of Ubuntu
      shell: |
        lsb_release -d
      register: ubuntu_os
      ignore_errors: yes

    - name: Applying replacement on 20.04 or 8
      lineinfile:
          dest: ~/.ansible/roles/pwslab.pip/defaults/main.yml
          regexp: '^pip_package: '
          line: 'pip_package: python3-pip'
          state: present
      when:
        - cent_os.stdout | regex_search("8") or ubuntu_os.stdout | regex_search("20.04")
        - not pip_exists.stat.exists

    - name: Installing PIP
      include_role:
        name: pwslab.pip
      when: not pip_exists.stat.exists
    
    - name: Installing Docker
      include_role:
          name: pwslab.docker
      when: not docker_exists.stat.exists

    - name: Create Discourse directory
      file:
        path: /var/discourse
        state: directory
        mode: 0775

    - name: Fetch Discourse
      git:
        repo: https://github.com/discourse/discourse_docker.git
        dest: /var/discourse
        version: master
        force: yes

    # - pause:
    #       prompt: "Hostname for your Discourse?"
    #       echo: yes
    #   register: hostname_result

    # - pause:
    #       prompt: Email address for admin account(s)? 
    #       echo: yes
    #   register: email_result

    # - pause:
    #       prompt: "SMTP server address?"
    #       echo: yes
    #   register: smtp_server_address_result
    
    # - pause:
    #       prompt: "SMTP user name?"
    #       echo: yes
    #   register: smtp_username_result

    # - pause:
    #       prompt: "SMTP port?"
    #       echo: yes
    #   register: smtp_port_result

    # - pause:
    #       prompt: "SMTP password?"
    #       echo: yes
    #   register: smtp_password_result

    # - set_fact:
    #         hostname_result: "{{ hostname_result.user_input }}"
    #         email_result: "{{ email_result.user_input }}"
    #         smtp_server_address_result: "{{ smtp_server_address_result.user_input }}"
    #         smtp_username_result: "{{ smtp_username_result.user_input }}"
    #         smtp_port_result: "{{ smtp_port_result.user_input }}"
    #         smtp_password_result: "{{ smtp_password_result.user_input }}"
    # - debug:
    #         var: hostname_result

    # - name: Execute the script
    #   expect:
    #     command: bash /var/discourse/discourse-setup
    #     responses:
    #       "Hostname for your Discourse?": "{{ hostname_result }}"
    #       "Email address for admin account(s)?": "{{ email_result }}"
    #       "SMTP server address?": "{{ smtp_server_address_result }}"
    #       "SMTP user name?": "{{ smtp_username_result }}"
    #       "SMTP port?": "{{ smtp_port_result }}"
    #       "SMTP password?": "{{ smtp_password_result }}"
    #       "Optional email address for Let's Encrypt warnings?": ""
    #       "ENTER to continue, 'n' to try again, Ctrl+C to exit": ""
